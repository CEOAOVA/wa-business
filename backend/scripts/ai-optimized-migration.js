const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Error: SUPABASE_URL y SUPABASE_SERVICE_ROLE_KEY son requeridos');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

/**
 * üß† MIGRACI√ìN OPTIMIZADA PARA IA
 * 
 * Esta migraci√≥n est√° dise√±ada para que la IA entienda los datos semiestructurados:
 * - Extrae autom√°ticamente marcas de veh√≠culos
 * - Identifica tipos de autopartes
 * - Genera keywords inteligentes
 * - Crea descripciones sem√°nticas
 * - Categoriza para b√∫squeda IA
 */

class AIOptimizedMigrator {
  constructor() {
    this.stats = {
      processed: 0,
      successful: 0,
      failed: 0,
      withBrand: 0,
      withPartType: 0,
      startTime: Date.now()
    };
  }

  /**
   * Migrar cat√°logo b√°sico con procesamiento IA
   */
  async migrateBasicCatalog(batchSize = 500, maxProducts = null) {
    console.log('\nüß† === MIGRACI√ìN IA: CAT√ÅLOGO B√ÅSICO ===\n');
    
    try {
      // Leer archivo JSON
             const filePath = path.join(process.cwd(), '..', '..', 'public', 'embler', 'inventario', 'c_embler.json');
      console.log(`üìÇ Leyendo: ${filePath}`);
      
      const rawData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
      const totalProducts = maxProducts ? Math.min(rawData.length, maxProducts) : rawData.length;
      
      console.log(`üìä Total productos a procesar: ${totalProducts}`);
      console.log(`üß† Cada producto ser√° procesado autom√°ticamente por IA`);
      console.log(`   ‚Ä¢ Extracci√≥n de marca de veh√≠culo`);
      console.log(`   ‚Ä¢ Identificaci√≥n de tipo de autoparte`);
      console.log(`   ‚Ä¢ Generaci√≥n de keywords inteligentes`);
      console.log(`   ‚Ä¢ Descripci√≥n sem√°ntica para IA\n`);

      // Limpiar datos existentes de prueba
      await this.cleanTestData();

      // Procesar en lotes
      const totalBatches = Math.ceil(totalProducts / batchSize);
      
      for (let batchNum = 0; batchNum < totalBatches; batchNum++) {
        const startIdx = batchNum * batchSize;
        const endIdx = Math.min(startIdx + batchSize, totalProducts);
        const batch = rawData.slice(startIdx, endIdx);

        console.log(`üì¶ Lote ${batchNum + 1}/${totalBatches}: Procesando ${batch.length} productos...`);

        const success = await this.processBatchBasic(batch, batchNum + 1);
        
        if (success) {
          console.log(`‚úÖ Lote ${batchNum + 1} completado exitosamente`);
        } else {
          console.log(`‚ö†Ô∏è  Lote ${batchNum + 1} tuvo errores`);
        }

        // Pausa para evitar rate limits
        await this.delay(500);
        
        // Mostrar progreso cada 5 lotes
        if ((batchNum + 1) % 5 === 0) {
          await this.showProgress();
        }
      }

      await this.showFinalStats('CAT√ÅLOGO B√ÅSICO');
      return this.stats;

    } catch (error) {
      console.error('‚ùå Error en migraci√≥n del cat√°logo b√°sico:', error);
      throw error;
    }
  }

  /**
   * Migrar cat√°logo con im√°genes con procesamiento IA
   */
  async migrateImagesCatalog(batchSize = 300, maxProducts = null) {
    console.log('\nüñºÔ∏è === MIGRACI√ìN IA: CAT√ÅLOGO CON IM√ÅGENES ===\n');
    
    try {
      // Leer archivo JSON  
             const filePath = path.join(process.cwd(), '..', '..', 'public', 'embler', 'inventario', 'c_embler_ml.json');
      console.log(`üìÇ Leyendo: ${filePath}`);
      
      const rawData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
      const totalProducts = maxProducts ? Math.min(rawData.length, maxProducts) : rawData.length;
      
      console.log(`üìä Total productos con im√°genes: ${totalProducts}`);
      console.log(`üß† Procesamiento IA incluye an√°lisis de im√°genes:\n`);

      // Procesar en lotes m√°s peque√±os (im√°genes son m√°s pesadas)
      const totalBatches = Math.ceil(totalProducts / batchSize);
      
      for (let batchNum = 0; batchNum < totalBatches; batchNum++) {
        const startIdx = batchNum * batchSize;
        const endIdx = Math.min(startIdx + batchSize, totalProducts);
        const batch = rawData.slice(startIdx, endIdx);

        console.log(`üì¶ Lote ${batchNum + 1}/${totalBatches}: Procesando ${batch.length} productos con im√°genes...`);

        const success = await this.processBatchImages(batch, batchNum + 1);
        
        if (success) {
          console.log(`‚úÖ Lote ${batchNum + 1} completado exitosamente`);
        } else {
          console.log(`‚ö†Ô∏è  Lote ${batchNum + 1} tuvo errores`);
        }

        // Pausa m√°s larga para im√°genes
        await this.delay(1000);
        
        // Mostrar progreso cada 3 lotes
        if ((batchNum + 1) % 3 === 0) {
          await this.showProgress();
        }
      }

      await this.showFinalStats('CAT√ÅLOGO CON IM√ÅGENES');
      return this.stats;

    } catch (error) {
      console.error('‚ùå Error en migraci√≥n del cat√°logo con im√°genes:', error);
      throw error;
    }
  }

  /**
   * Procesar lote de productos b√°sicos
   */
  async processBatchBasic(batch, batchNumber) {
    try {
      // Filtrar y transformar productos v√°lidos
      const validProducts = batch
        .filter(item => item && item.Nombre && item.Nombre.trim() !== '')
        .map(item => ({
          clave: item.Clave && item.Clave.toString().trim() !== '' ? item.Clave.toString() : null,
          nombre: item.Nombre.trim(),
          is_active: true
        }));

      if (validProducts.length === 0) {
        console.log(`‚ö†Ô∏è  Lote ${batchNumber}: Sin productos v√°lidos`);
        return true;
      }

      // Insertar usando las funciones IA (triggers autom√°ticos)
      const { data, error } = await supabase
        .from('product_basic_catalog')
        .insert(validProducts)
        .select('extracted_brand, extracted_part_type');

      if (error) {
        console.error(`‚ùå Error en lote ${batchNumber}:`, error.message);
        this.stats.failed += validProducts.length;
        return false;
      }

      // Actualizar estad√≠sticas IA
      this.stats.processed += validProducts.length;
      this.stats.successful += validProducts.length;
      
      if (data) {
        this.stats.withBrand += data.filter(item => item.extracted_brand).length;
        this.stats.withPartType += data.filter(item => item.extracted_part_type).length;
      }

      return true;

    } catch (error) {
      console.error(`‚ùå Error procesando lote ${batchNumber}:`, error);
      this.stats.failed += batch.length;
      return false;
    }
  }

  /**
   * Procesar lote de productos con im√°genes
   */
  async processBatchImages(batch, batchNumber) {
    try {
      // Filtrar y transformar productos v√°lidos
      const validProducts = batch
        .filter(item => item && item.titulo && item.titulo.trim() !== '')
        .map(item => ({
          titulo: item.titulo.trim(),
          categoria: item.categoria || null,
          imagen_1: this.validateImageUrl(item.imagen_1),
          imagen_2: this.validateImageUrl(item.imagen_2),
          imagen_3: this.validateImageUrl(item.imagen_3),
          imagen_4: this.validateImageUrl(item.imagen_4),
          imagen_5: this.validateImageUrl(item.imagen_5),
          imagen_6: this.validateImageUrl(item.imagen_6),
          imagen_7: this.validateImageUrl(item.imagen_7),
          imagen_8: this.validateImageUrl(item.imagen_8),
          imagen_9: this.validateImageUrl(item.imagen_9),
          imagen_10: this.validateImageUrl(item.imagen_10),
          is_active: true
        }));

      if (validProducts.length === 0) {
        console.log(`‚ö†Ô∏è  Lote ${batchNumber}: Sin productos v√°lidos`);
        return true;
      }

      // Insertar usando las funciones IA (triggers autom√°ticos)
      const { data, error } = await supabase
        .from('product_catalog_with_images')
        .insert(validProducts)
        .select('extracted_brand, extracted_part_type, total_images');

      if (error) {
        console.error(`‚ùå Error en lote ${batchNumber}:`, error.message);
        this.stats.failed += validProducts.length;
        return false;
      }

      // Actualizar estad√≠sticas IA
      this.stats.processed += validProducts.length;
      this.stats.successful += validProducts.length;
      
      if (data) {
        this.stats.withBrand += data.filter(item => item.extracted_brand).length;
        this.stats.withPartType += data.filter(item => item.extracted_part_type).length;
      }

      return true;

    } catch (error) {
      console.error(`‚ùå Error procesando lote ${batchNumber}:`, error);
      this.stats.failed += batch.length;
      return false;
    }
  }

  /**
   * Validar URL de imagen
   */
  validateImageUrl(url) {
    if (!url || typeof url !== 'string') return null;
    const trimmed = url.trim();
    return trimmed.startsWith('http') ? trimmed : null;
  }

  /**
   * Limpiar datos de prueba
   */
  async cleanTestData() {
    try {
      console.log('üßπ Limpiando datos de prueba...');
      await supabase.from('product_basic_catalog').delete().like('clave', 'TEST%');
      console.log('‚úÖ Datos de prueba limpiados\n');
    } catch (error) {
      console.log('‚ö†Ô∏è  Error limpiando datos de prueba (continuar anyway)');
    }
  }

  /**
   * Mostrar progreso actual
   */
  async showProgress() {
    try {
      const { count: totalBasic } = await supabase
        .from('product_basic_catalog')
        .select('*', { count: 'exact', head: true });

      const { count: totalImages } = await supabase
        .from('product_catalog_with_images')
        .select('*', { count: 'exact', head: true });

      const elapsedTime = ((Date.now() - this.stats.startTime) / 1000).toFixed(1);
      const successRate = this.stats.processed > 0 ? ((this.stats.successful / this.stats.processed) * 100).toFixed(1) : 0;
      const brandDetectionRate = this.stats.successful > 0 ? ((this.stats.withBrand / this.stats.successful) * 100).toFixed(1) : 0;
      const partTypeDetectionRate = this.stats.successful > 0 ? ((this.stats.withPartType / this.stats.successful) * 100).toFixed(1) : 0;

      console.log(`\nüìä PROGRESO ACTUAL:`);
      console.log(`   ‚è±Ô∏è  Tiempo transcurrido: ${elapsedTime}s`);
      console.log(`   üì¶ Productos procesados: ${this.stats.processed}`);
      console.log(`   ‚úÖ √âxito: ${this.stats.successful} (${successRate}%)`);
      console.log(`   ‚ùå Fallos: ${this.stats.failed}`);
      console.log(`   üß† IA - Marcas detectadas: ${this.stats.withBrand} (${brandDetectionRate}%)`);
      console.log(`   üß† IA - Tipos detectados: ${this.stats.withPartType} (${partTypeDetectionRate}%)`);
      console.log(`   üìö Total en DB b√°sico: ${totalBasic || 0}`);
      console.log(`   üñºÔ∏è  Total en DB im√°genes: ${totalImages || 0}\n`);

    } catch (error) {
      console.log('‚ö†Ô∏è  Error mostrando progreso');
    }
  }

  /**
   * Mostrar estad√≠sticas finales
   */
  async showFinalStats(catalogType) {
    const totalTime = ((Date.now() - this.stats.startTime) / 1000).toFixed(2);
    const productsPerSecond = this.stats.successful > 0 ? (this.stats.successful / (totalTime / 1000)).toFixed(1) : 0;

    console.log(`\nüéâ === MIGRACI√ìN ${catalogType} COMPLETADA ===`);
    console.log(`‚è±Ô∏è  Tiempo total: ${totalTime} segundos`);
    console.log(`üì¶ Productos procesados: ${this.stats.processed}`);
    console.log(`‚úÖ Exitosos: ${this.stats.successful}`);
    console.log(`‚ùå Fallidos: ${this.stats.failed}`);
    console.log(`‚ö° Velocidad: ${productsPerSecond} productos/segundo`);
    console.log(`\nüß† AN√ÅLISIS IA:`);
    console.log(`üè∑Ô∏è  Marcas detectadas: ${this.stats.withBrand} (${((this.stats.withBrand / this.stats.successful) * 100).toFixed(1)}%)`);
    console.log(`üîß Tipos detectados: ${this.stats.withPartType} (${((this.stats.withPartType / this.stats.successful) * 100).toFixed(1)}%)`);

    // Verificar base de datos
    await this.verifyDatabase();
  }

  /**
   * Verificar estado de la base de datos
   */
  async verifyDatabase() {
    try {
      console.log(`\nüîç VERIFICACI√ìN BASE DE DATOS:`);

      const tables = [
        { name: 'concepts_mapping', desc: 'Conceptos mexicanos' },
        { name: 'product_basic_catalog', desc: 'Cat√°logo b√°sico' },
        { name: 'product_catalog_with_images', desc: 'Cat√°logo con im√°genes' },
        { name: 'vehicle_brands', desc: 'Marcas de veh√≠culos' },
        { name: 'autopart_types', desc: 'Tipos de autopartes' }
      ];

      for (const table of tables) {
        const { count, error } = await supabase
          .from(table.name)
          .select('*', { count: 'exact', head: true });
        
        if (error) {
          console.log(`‚ùå ${table.desc}: Error - ${error.message}`);
        } else {
          console.log(`üìä ${table.desc}: ${count} registros`);
        }
      }

    } catch (error) {
      console.error('‚ùå Error verificando base de datos:', error);
    }
  }

  /**
   * Delay utility
   */
  async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * Funci√≥n principal
 */
async function runAIOptimizedMigration() {
  console.log('üöÄ ========================================');
  console.log('    MIGRACI√ìN OPTIMIZADA PARA IA');
  console.log('========================================\n');
  console.log('üß† Esta migraci√≥n procesa datos semiestructurados');
  console.log('   para que la IA los entienda perfectamente:\n');
  console.log('   ‚úÖ Extracci√≥n autom√°tica de marcas');
  console.log('   ‚úÖ Identificaci√≥n de tipos de autopartes');
  console.log('   ‚úÖ Generaci√≥n de keywords inteligentes');
  console.log('   ‚úÖ Descripciones sem√°nticas para IA');
  console.log('   ‚úÖ Categorizaci√≥n autom√°tica\n');

  const migrator = new AIOptimizedMigrator();

  try {
    // Argumentos de l√≠nea de comandos
    const args = process.argv.slice(2);
    const catalogType = args[0] || 'basic';
    const maxProducts = args.includes('--limit') ? parseInt(args[args.indexOf('--limit') + 1]) : null;

    if (catalogType === 'basic' || catalogType === 'all') {
      await migrator.migrateBasicCatalog(500, maxProducts);
    }

    if (catalogType === 'images' || catalogType === 'all') {
      await migrator.migrateImagesCatalog(300, maxProducts);
    }

    console.log('\nüéâ ¬°MIGRACI√ìN IA COMPLETADA EXITOSAMENTE!');
    console.log('üß† Los datos est√°n optimizados para comprensi√≥n de IA');

  } catch (error) {
    console.error('\n‚ùå ERROR CR√çTICO EN MIGRACI√ìN IA:', error.message);
    process.exit(1);
  }
}

// Mostrar ayuda si se ejecuta sin argumentos
if (require.main === module) {
  const command = process.argv[2];
  
  if (!command || command === 'help') {
    console.log('üß† MIGRACI√ìN OPTIMIZADA PARA IA - USO:');
    console.log('');
    console.log('  node ai-optimized-migration.js basic          # Migrar cat√°logo b√°sico');
    console.log('  node ai-optimized-migration.js images         # Migrar cat√°logo con im√°genes');
    console.log('  node ai-optimized-migration.js all            # Migrar ambos cat√°logos');
    console.log('  node ai-optimized-migration.js basic --limit 1000  # Limitar productos');
    console.log('');
    console.log('üß† CARACTER√çSTICAS IA:');
    console.log('  ‚Ä¢ Extracci√≥n autom√°tica de marcas de veh√≠culos');
    console.log('  ‚Ä¢ Identificaci√≥n inteligente de tipos de autopartes');
    console.log('  ‚Ä¢ Generaci√≥n de keywords para b√∫squeda sem√°ntica');
    console.log('  ‚Ä¢ Descripciones estructuradas para IA');
    console.log('  ‚Ä¢ Categorizaci√≥n autom√°tica por contexto');
    console.log('');
    console.log('üìã REQUERIDO: SUPABASE_URL y SUPABASE_SERVICE_ROLE_KEY');
  } else {
    runAIOptimizedMigration();
  }
}

module.exports = { AIOptimizedMigrator }; 