/**
 * Generador de prompts din√°micos para conversaciones contextuales
 * Adapta los prompts seg√∫n el contexto, preferencias del usuario y estado actual
 */

import { ConversationMemory } from './conversation-memory';

export interface PromptTemplate {
  id: string;
  name: string;
  basePrompt: string;
  contextualModifiers: string[];
  userStyleModifiers: {
    formal: string;
    casual: string;
    technical: string;
  };
  scenarioSpecific: {
    initial: string;
    searching: string;
    comparing: string;
    purchasing: string;
    support: string;
  };
}

export interface PromptContext {
  conversationMemory: ConversationMemory;
  currentMessage: string;
  intent: string;
  entities: Map<string, any>;
  availableFunctions: string[];
  businessContext: any;
}

export class DynamicPromptGenerator {
  private prompts: Map<string, PromptTemplate> = new Map();

  constructor() {
    this.initializePromptTemplates();
  }

  /**
   * Inicializa las plantillas de prompts
   */
  private initializePromptTemplates(): void {
    // Prompt principal del asistente con flujo natural
    this.prompts.set('main', {
      id: 'main',
      name: 'Asistente Principal',
      basePrompt: `Eres Embler, un asistente inteligente especializado en refacciones automotrices para M√©xico. 
Trabajas para AOVA, una empresa l√≠der en distribuci√≥n de refacciones.

üéØ OBJETIVO PRINCIPAL: Mantener conversaciones naturales y contextuales sin repetir saludos innecesarios.

üìã REGLAS FUNDAMENTALES DE CONVERSACI√ìN NATURAL:

1. **CONTINUIDAD CONTEXTUAL**:
   - Si es la primera interacci√≥n del d√≠a: "¬°Hola! ¬øEn qu√© te puedo ayudar hoy?"
   - Si es continuaci√≥n de conversaci√≥n: Usa referencias como "Continuemos con lo que est√°bamos viendo..." o "Como mencionabas antes..."
   - Si es usuario recurrente: "¬°Hola de nuevo! ¬øQu√© necesitas hoy?"

2. **MEMORIA CONVERSACIONAL**:
   - Recuerda productos mencionados anteriormente
   - Haz referencias a consultas previas: "Como buscabas antes..."
   - Menciona preferencias aprendidas: "Como prefieres las marcas..."
   - Usa informaci√≥n del veh√≠culo si ya la tienes

3. **TRANSICIONES NATURALES**:
   - "Cambiando de tema..." cuando cambies de asunto
   - "Volviendo a lo anterior..." cuando retomes un tema
   - "Por cierto..." para informaci√≥n adicional
   - "Mientras tanto..." para procesos paralelos

4. **PERSONALIZACI√ìN INTELIGENTE**:
   - Adapta el tono seg√∫n el usuario (formal/casual/t√©cnico)
   - Usa el nombre si lo conoces
   - Menciona horarios apropiados (ma√±ana/tarde/noche)
   - Considera si es cliente VIP o recurrente

5. **EVITAR REPETICIONES**:
   - NO saludes si ya saludaste en la sesi√≥n
   - NO repitas informaci√≥n ya proporcionada
   - Usa referencias en lugar de repetir
   - Mant√©n contexto entre mensajes

CAPACIDADES T√âCNICAS:
- Consultar inventario en tiempo real
- Generar tickets de compra
- Buscar por n√∫mero VIN
- Procesar env√≠os
- Conectar con asesores humanos

GUIDELINES ESPEC√çFICOS:
- Siempre pregunta por detalles espec√≠ficos (marca, modelo, a√±o) cuando sea necesario
- Ofrece alternativas si no hay stock
- Menciona precios y disponibilidad
- Sugiere productos relacionados cuando sea relevante
- Escala a asesor humano cuando sea necesario

ESTILO DE COMUNICACI√ìN:
- Profesional pero amigable
- Conocimiento profundo de refacciones automotrices
- Enfoque en ayudar genuinamente al cliente
- Proactivo en ofrecer soluciones`,
      contextualModifiers: [
        'Cliente conocido - personaliza la experiencia',
        'Primera vez - explica el proceso',
        'Cliente VIP - ofrece atenci√≥n preferencial',
        'Urgente - prioriza rapidez',
        'Precio sensible - enf√≥cate en valor'
      ],
      userStyleModifiers: {
        formal: 'Usa tratamiento formal (usted) y lenguaje profesional.',
        casual: 'Usa un tono amigable y natural con tuteo.',
        technical: 'Incluye detalles t√©cnicos y especificaciones precisas.'
      },
      scenarioSpecific: {
        initial: 'Saluda contextualmente y pregunta c√≥mo puedes ayudar.',
        searching: 'Enf√≥cate en encontrar la refacci√≥n exacta que necesita.',
        comparing: 'Ayuda a comparar opciones y tomar la mejor decisi√≥n.',
        purchasing: 'Gu√≠a el proceso de compra de manera clara y confiable.',
        support: 'Ofrece soporte t√©cnico y resuelve dudas espec√≠ficas.'
      }
    });

    // Prompt para b√∫squeda de inventario
    this.prompts.set('inventory_search', {
      id: 'inventory_search',
      name: 'B√∫squeda de Inventario',
      basePrompt: `Est√°s ayudando a buscar refacciones en el inventario. 
Usa las funciones disponibles para encontrar exactamente lo que necesita el cliente.

PROCESO:
1. Clarifica especificaciones (marca, modelo, a√±o, VIN si es posible)
2. Busca en inventario usando los t√©rminos correctos
3. Presenta opciones disponibles con precios
4. Sugiere alternativas si no hay stock
5. Ofrece productos relacionados`,
      contextualModifiers: [
        'B√∫squeda espec√≠fica - usa detalles exactos',
        'B√∫squeda amplia - explora opciones',
        'Sin resultados - ofrece alternativas',
        'M√∫ltiples opciones - ayuda a elegir'
      ],
      userStyleModifiers: {
        formal: 'Presente opciones de manera estructurada y profesional.',
        casual: 'Explica opciones de manera conversacional y f√°cil.',
        technical: 'Incluye especificaciones t√©cnicas y compatibilidad.'
      },
      scenarioSpecific: {
        initial: 'Comienza recopilando informaci√≥n del veh√≠culo.',
        searching: 'Busca activamente usando las funciones disponibles.',
        comparing: 'Compara especificaciones y precios.',
        purchasing: 'Confirma compatibilidad antes de proceder.',
        support: 'Explica compatibilidad y instalaci√≥n.'
      }
    });

    // Prompt para generaci√≥n de tickets
    this.prompts.set('ticket_generation', {
      id: 'ticket_generation',
      name: 'Generaci√≥n de Tickets',
      basePrompt: `Est√°s generando un ticket de compra para el cliente.
Aseg√∫rate de que toda la informaci√≥n est√© completa y sea precisa.

PROCESO:
1. Confirma productos seleccionados
2. Verifica disponibilidad final
3. Calcula totales incluyendo impuestos
4. Genera ticket con todos los detalles
5. Explica pr√≥ximos pasos

INFORMACI√ìN REQUERIDA:
- Productos espec√≠ficos y cantidades
- Precios actuales
- Informaci√≥n del cliente
- M√©todo de pago/entrega`,
      contextualModifiers: [
        'Primera compra - explica proceso',
        'Cliente recurrente - procesa r√°pidamente',
        'Compra grande - verifica descuentos',
        'Urgente - prioriza rapidez'
      ],
      userStyleModifiers: {
        formal: 'Procesa de manera profesional y detallada.',
        casual: 'Explica de manera amigable y clara.',
        technical: 'Incluye especificaciones t√©cnicas en el ticket.'
      },
      scenarioSpecific: {
        initial: 'Explica el proceso de generaci√≥n de ticket.',
        searching: 'Busca productos para el ticket.',
        comparing: 'Ayuda a elegir antes de generar.',
        purchasing: 'Genera ticket y procesa compra.',
        support: 'Explica t√©rminos y condiciones.'
      }
    });

    // Prompt para manejo de errores
    this.prompts.set('error_handling', {
      id: 'error_handling',
      name: 'Manejo de Errores',
      basePrompt: `Ha ocurrido un problema t√©cnico. Mant√©n la calma y ayuda al cliente.

APPROACH:
1. Reconoce el problema sin entrar en detalles t√©cnicos
2. Ofrece alternativas inmediatas
3. Escala a soporte humano si es necesario
4. Mant√©n confianza del cliente

NEVER:
- Culpes al sistema
- Muestres c√≥digos de error
- Hagas promesas espec√≠ficas sobre tiempos de resoluci√≥n`,
      contextualModifiers: [
        'Error cr√≠tico - escala inmediatamente',
        'Error menor - ofrece alternativas',
        'Error recurrente - explica situaci√≥n',
        'Error de conectividad - sugiere reintentar'
      ],
      userStyleModifiers: {
        formal: 'Mant√©n profesionalismo y ofrece soluciones.',
        casual: 'Tranquiliza de manera amigable.',
        technical: 'Ofrece contexto t√©cnico apropiado.'
      },
      scenarioSpecific: {
        initial: 'Reconoce el problema y ofrece ayuda.',
        searching: 'Sugiere m√©todos alternativos de b√∫squeda.',
        comparing: 'Usa informaci√≥n disponible para comparar.',
        purchasing: 'Escala a soporte humano para completar compra.',
        support: 'Conecta con asesor t√©cnico especializado.'
      }
    });
  }

  /**
   * Genera un prompt din√°mico basado en el contexto
   */
  generatePrompt(promptId: string, context: PromptContext): string {
    const template = this.prompts.get(promptId);
    if (!template) {
      console.warn(`[DynamicPromptGenerator] Plantilla no encontrada: ${promptId}`);
      return this.generateFallbackPrompt(context);
    }

    let prompt = template.basePrompt;

    // Agregar modificadores contextuales
    prompt += this.addContextualModifiers(template, context);

    // Agregar estilo de usuario
    prompt += this.addUserStyleModifiers(template, context);

    // Agregar informaci√≥n espec√≠fica del escenario
    prompt += this.addScenarioSpecificInfo(template, context);

    // Agregar contexto de conversaci√≥n
    prompt += this.addConversationContext(context);

    // Agregar funciones disponibles
    prompt += this.addAvailableFunctions(context);

    // Agregar informaci√≥n del negocio
    prompt += this.addBusinessContext(context);

    return prompt;
  }

  /**
   * Genera prompt principal para conversaciones de piezas automotrices
   */
  generateMainPrompt(context: PromptContext): string {
    const memory = context.conversationMemory;
    const conversationLength = memory.metadata.conversationLength;
    
    let prompt = `Eres Embler, un asistente inteligente de refacciones automotrices para M√©xico.
Trabajas para AOVA, una empresa l√≠der en distribuci√≥n de refacciones.

üéØ OBJETIVO: Buscar piezas automotrices usando marca, modelo y nombre de pieza.
RESPUESTA √öNICA: Solo devolver CLAVE y MARCA de la pieza encontrada.

üìã REGLAS FUNDAMENTALES:
- NO mencionar precios ni disponibilidad
- NO preguntar por n√∫mero de parte
- Solo devolver clave y marca de la pieza
- Si no encuentra la pieza, explicar que no est√° disponible
- Mantener conversaci√≥n natural y contextual

üîç PROCESO DE B√öSQUEDA:
1. Extraer marca del auto (ej: Toyota, Honda, VW)
2. Extraer modelo del auto (ej: Corolla, Civic, Sprinter)
3. Extraer nombre de la pieza (ej: funda palanca velocidades, balatas)
4. Buscar en base de datos usando estos 3 datos
5. Devolver solo: Clave y Marca de la pieza

üí¨ TIPOS DE RESPUESTA:
- Si encuentra 1 pieza: "Encontr√© esta pieza: Clave ABC123, Marca FREY"
- Si encuentra m√∫ltiples: "Encontr√© X opciones: 1. Clave ABC123, Marca FREY..."
- Si no encuentra: "No encontr√© piezas para tu [marca] [modelo]"

üö´ RESTRICCIONES:
- NO preguntar por n√∫mero de parte
- NO mencionar precios
- NO mencionar disponibilidad
- NO pedir informaci√≥n adicional si ya tiene marca, modelo y pieza

üìù EJEMPLOS DE RESPUESTA:
Usuario: "Necesito funda palanca velocidades para VW Sprinter 2006"
Respuesta: "Encontr√© esta pieza para tu VW Sprinter: Clave XYZ789, Marca FREY"

Usuario: "Busco balatas para Toyota Corolla"
Respuesta: "Encontr√© 2 opciones para tu Toyota Corolla: 1. Clave ABC123, Marca BREMBO 2. Clave DEF456, Marca AKEBONO"`;

    // Agregar instrucciones espec√≠ficas de continuidad
    prompt += '\n\nINSTRUCCIONES ESPEC√çFICAS DE CONTINUIDAD:\n';

    if (conversationLength > 1) {
      prompt += '- NO saludes nuevamente\n';
      prompt += '- Usa referencias a la conversaci√≥n anterior\n';
      
      if (memory.shortTermMemory.recentQueries.length > 1) {
        const lastQuery = memory.shortTermMemory.recentQueries[memory.shortTermMemory.recentQueries.length - 2];
        prompt += `- √öltima consulta: "${lastQuery}"\n`;
      }

      if (memory.shortTermMemory.currentTopic) {
        prompt += `- T√≥pico actual: ${memory.shortTermMemory.currentTopic}\n`;
      }

      // Referencias espec√≠ficas seg√∫n el contexto
      if (memory.longTermMemory.userProfile.preferences.vehicleInfo) {
        const vehicle = memory.longTermMemory.userProfile.preferences.vehicleInfo;
        prompt += `- Veh√≠culo mencionado: ${vehicle.brand} ${vehicle.model} ${vehicle.year}\n`;
      }

      if (memory.longTermMemory.userProfile.preferences.preferredBrands.length > 0) {
        prompt += `- Marcas preferidas: ${memory.longTermMemory.userProfile.preferences.preferredBrands.join(', ')}\n`;
      }

      prompt += '\nFRASES DE CONTINUIDAD SUGERIDAS:\n';
      prompt += '- "Continuemos con lo que est√°bamos viendo..."\n';
      prompt += '- "Como mencionabas antes..."\n';
      prompt += '- "Retomando lo que buscabas..."\n';
      prompt += '- "Ahora, respecto a..."\n';
      prompt += '- "Cambiando de tema..."\n';
    }

    return prompt;
  }

  /**
   * Genera prompt espec√≠fico para continuidad de conversaci√≥n
   */
  generateContinuationPrompt(context: PromptContext): string {
    const memory = context.conversationMemory;
    const conversationLength = memory.metadata.conversationLength;
    const recentQueries = memory.shortTermMemory.recentQueries;
    const currentTopic = memory.shortTermMemory.currentTopic;
    const userProfile = memory.longTermMemory.userProfile;

    let continuationPrompt = this.generatePrompt('main', context);

    // Agregar instrucciones espec√≠ficas de continuidad
    continuationPrompt += '\n\nINSTRUCCIONES ESPEC√çFICAS DE CONTINUIDAD:\n';

    if (conversationLength > 1) {
      continuationPrompt += '- NO saludes nuevamente\n';
      continuationPrompt += '- Usa referencias a la conversaci√≥n anterior\n';
      
      if (recentQueries.length > 1) {
        const lastQuery = recentQueries[recentQueries.length - 2];
        continuationPrompt += `- √öltima consulta: "${lastQuery}"\n`;
      }

      if (currentTopic) {
        continuationPrompt += `- T√≥pico actual: ${currentTopic}\n`;
      }

      // Referencias espec√≠ficas seg√∫n el contexto
      if (userProfile.preferences.vehicleInfo) {
        const vehicle = userProfile.preferences.vehicleInfo;
        continuationPrompt += `- Veh√≠culo mencionado: ${vehicle.brand} ${vehicle.model} ${vehicle.year}\n`;
      }

      if (userProfile.preferences.preferredBrands.length > 0) {
        continuationPrompt += `- Marcas preferidas: ${userProfile.preferences.preferredBrands.join(', ')}\n`;
      }

      continuationPrompt += '\nFRASES DE CONTINUIDAD SUGERIDAS:\n';
      continuationPrompt += '- "Continuemos con lo que est√°bamos viendo..."\n';
      continuationPrompt += '- "Como mencionabas antes..."\n';
      continuationPrompt += '- "Retomando lo que buscabas..."\n';
      continuationPrompt += '- "Ahora, respecto a..."\n';
      continuationPrompt += '- "Cambiando de tema..."\n';
    }

    return continuationPrompt;
  }

  /**
   * Agrega modificadores contextuales al prompt
   */
  private addContextualModifiers(template: PromptTemplate, context: PromptContext): string {
    const memory = context.conversationMemory;
    const userProfile = memory.longTermMemory.userProfile;
    const patterns = memory.longTermMemory.behaviorPatterns;
    const conversationLength = memory.metadata.conversationLength;
    const lastInteraction = userProfile.interactions.lastInteraction;
    const now = new Date();

    let modifiers = '\n\nCONTEXTO ESPECIAL:\n';

    // Determinar si es primera interacci√≥n del d√≠a
    const isFirstInteractionOfDay = !lastInteraction || 
      lastInteraction.getDate() !== now.getDate() ||
      lastInteraction.getMonth() !== now.getMonth() ||
      lastInteraction.getFullYear() !== now.getFullYear();

    if (isFirstInteractionOfDay && conversationLength === 1) {
      modifiers += '- PRIMERA INTERACCI√ìN DEL D√çA: Saluda apropiadamente\n';
    } else if (conversationLength > 1) {
      modifiers += '- CONVERSACI√ìN EN CURSO: Mant√©n continuidad sin repetir saludos\n';
    }

    // Verificar si es cliente conocido
    if (userProfile.interactions.totalMessages > 5) {
      modifiers += '- CLIENTE CONOCIDO: Personaliza la experiencia\n';
    } else if (conversationLength === 1) {
      modifiers += '- CLIENTE NUEVO: Explica el proceso y s√© acogedor\n';
    }

    // Verificar si es VIP
    if (userProfile.businessContext.isVipCustomer) {
      modifiers += '- CLIENTE VIP: Ofrece atenci√≥n preferencial\n';
    }

    // Agregar patrones de comportamiento
    patterns.forEach(pattern => {
      switch (pattern) {
        case 'price_conscious':
          modifiers += '- PRECIO SENSIBLE: Enf√≥cate en valor y opciones econ√≥micas\n';
          break;
        case 'urgent_need':
          modifiers += '- URGENTE: Prioriza rapidez y disponibilidad inmediata\n';
          break;
        case 'technical_focused':
          modifiers += '- ENFOQUE T√âCNICO: Incluye especificaciones detalladas\n';
          break;
        case 'brand_focused':
          modifiers += '- ENFOQUE EN MARCA: Respeta preferencias de marca\n';
          break;
        case 'compatibility_focused':
          modifiers += '- ENFOQUE EN COMPATIBILIDAD: Verifica compatibilidad detalladamente\n';
          break;
      }
    });

    // Agregar contexto temporal
    const hour = now.getHours();
    if (hour >= 6 && hour < 12) {
      modifiers += '- HORA: Ma√±ana - Usa saludos matutinos apropiados\n';
    } else if (hour >= 12 && hour < 18) {
      modifiers += '- HORA: Tarde - Usa saludos vespertinos apropiados\n';
    } else if (hour >= 18 && hour < 22) {
      modifiers += '- HORA: Noche - Usa saludos nocturnos apropiados\n';
    } else {
      modifiers += '- HORA: Madrugada - Considera horarios de servicio\n';
    }

    // Agregar instrucciones de continuidad
    if (conversationLength > 1) {
      modifiers += '\nINSTRUCCIONES DE CONTINUIDAD:\n';
      modifiers += '- Usa referencias a conversaciones anteriores\n';
      modifiers += '- NO repitas informaci√≥n ya proporcionada\n';
      modifiers += '- Mant√©n el contexto de la conversaci√≥n\n';
      modifiers += '- Haz transiciones naturales entre temas\n';
    }

    return modifiers;
  }

  /**
   * Agrega modificadores de estilo de usuario
   */
  private addUserStyleModifiers(template: PromptTemplate, context: PromptContext): string {
    const userProfile = context.conversationMemory.longTermMemory.userProfile;
    const style = userProfile.preferences.communicationStyle;

    return `\n\nESTILO DE COMUNICACI√ìN:\n${template.userStyleModifiers[style]}\n`;
  }

  /**
   * Agrega informaci√≥n espec√≠fica del escenario
   */
  private addScenarioSpecificInfo(template: PromptTemplate, context: PromptContext): string {
    const currentPhase = context.conversationMemory.shortTermMemory.currentTopic;
    const conversationLength = context.conversationMemory.metadata.conversationLength;
    let scenario: keyof typeof template.scenarioSpecific = 'initial';

    // Determinar escenario basado en el intent y contexto
    if (context.intent.includes('search') || context.intent.includes('find')) {
      scenario = 'searching';
    } else if (context.intent.includes('compare')) {
      scenario = 'comparing';
    } else if (context.intent.includes('buy') || context.intent.includes('purchase')) {
      scenario = 'purchasing';
    } else if (context.intent.includes('support') || context.intent.includes('help')) {
      scenario = 'support';
    }

    let scenarioInfo = `\n\nESCENARIO ACTUAL:\n${template.scenarioSpecific[scenario]}\n`;

    // Agregar instrucciones de transici√≥n si es necesario
    if (conversationLength > 1) {
      scenarioInfo += '\nINSTRUCCIONES DE TRANSICI√ìN:\n';
      
      switch (scenario) {
        case 'searching':
          scenarioInfo += '- Si cambias de b√∫squeda, usa "Ahora busquemos..." o "Cambiando a..."\n';
          scenarioInfo += '- Si retomas b√∫squeda anterior, usa "Volviendo a lo que buscabas..."\n';
          break;
        case 'comparing':
          scenarioInfo += '- Usa "Comparando..." o "Veamos las diferencias..."\n';
          scenarioInfo += '- Menciona criterios de comparaci√≥n claramente\n';
          break;
        case 'purchasing':
          scenarioInfo += '- Usa "Procedamos con la compra..." o "Confirmemos..."\n';
          scenarioInfo += '- Mant√©n el contexto de productos seleccionados\n';
          break;
        case 'support':
          scenarioInfo += '- Usa "Te ayudo con..." o "Resolvamos esto..."\n';
          scenarioInfo += '- Mant√©n enfoque en el problema espec√≠fico\n';
          break;
        default:
          scenarioInfo += '- Haz transiciones naturales entre temas\n';
          scenarioInfo += '- Usa referencias al contexto anterior\n';
      }
    }

    return scenarioInfo;
  }

  /**
   * Agrega contexto de conversaci√≥n
   */
  private addConversationContext(context: PromptContext): string {
    const memory = context.conversationMemory;
    const recentQueries = memory.shortTermMemory.recentQueries;
    const currentIntent = memory.workingMemory.currentIntent;
    const entities = context.entities;
    const conversationLength = memory.metadata.conversationLength;
    const userProfile = memory.longTermMemory.userProfile;

    let conversationContext = '\n\nCONTEXTO DE CONVERSACI√ìN:\n';
    
    // Determinar tipo de interacci√≥n
    if (conversationLength === 1) {
      conversationContext += '- PRIMERA INTERACCI√ìN: Saluda contextualmente\n';
    } else if (conversationLength > 1) {
      conversationContext += '- CONVERSACI√ìN EN CURSO: Mant√©n continuidad y usa referencias\n';
    }

    // Informaci√≥n del usuario si es conocida
    if (userProfile.preferences.vehicleInfo) {
      const vehicle = userProfile.preferences.vehicleInfo;
      conversationContext += `- VEH√çCULO CONOCIDO: ${vehicle.brand} ${vehicle.model} ${vehicle.year}\n`;
    }

    if (userProfile.preferences.preferredBrands.length > 0) {
      conversationContext += `- MARCAS PREFERIDAS: ${userProfile.preferences.preferredBrands.join(', ')}\n`;
    }

    // Referencias a consultas anteriores
    if (recentQueries.length > 1) {
      const lastQuery = recentQueries[recentQueries.length - 2]; // Query anterior
      conversationContext += `- CONSULTA ANTERIOR: "${lastQuery}"\n`;
    }

    // Entidades mencionadas en esta conversaci√≥n
    if (entities.size > 0) {
      conversationContext += '- ENTIDADES MENCIONADAS:\n';
      for (const [key, value] of entities.entries()) {
        conversationContext += `  * ${key}: ${value}\n`;
      }
    }

    // T√≥pico actual
    if (memory.shortTermMemory.currentTopic) {
      conversationContext += `- T√ìPICO ACTUAL: ${memory.shortTermMemory.currentTopic}\n`;
    }

    // Patrones de comportamiento detectados
    const patterns = memory.longTermMemory.behaviorPatterns;
    if (patterns.length > 0) {
      conversationContext += `- PATRONES DETECTADOS: ${patterns.join(', ')}\n`;
    }

    // Instrucciones espec√≠ficas para continuidad
    if (conversationLength > 1) {
      conversationContext += '\nINSTRUCCIONES DE CONTINUIDAD:\n';
      conversationContext += '- Usa referencias como "Como mencionabas antes..." o "Continuemos con..."\n';
      conversationContext += '- NO repitas saludos ni informaci√≥n ya proporcionada\n';
      conversationContext += '- Mant√©n el contexto de la conversaci√≥n anterior\n';
      conversationContext += '- Haz transiciones naturales entre temas\n';
    }

    return conversationContext;
  }

  /**
   * Agrega funciones disponibles
   */
  private addAvailableFunctions(context: PromptContext): string {
    let functionsContext = '\n\nFUNCIONES DISPONIBLES:\n';
    
    context.availableFunctions.forEach(func => {
      switch (func) {
        case 'consultarInventario':
          functionsContext += '- consultarInventario: Buscar productos espec√≠ficos\n';
          break;
        case 'consultarInventarioGeneral':
          functionsContext += '- consultarInventarioGeneral: Ver inventario completo\n';
          break;
        case 'buscarYConsultarInventario':
          functionsContext += '- buscarYConsultarInventario: B√∫squeda inteligente\n';
          break;
        case 'generarTicket':
          functionsContext += '- generarTicket: Generar ticket de compra\n';
          break;
        case 'confirmarCompra':
          functionsContext += '- confirmarCompra: Confirmar transacci√≥n\n';
          break;
        case 'buscarPorVin':
          functionsContext += '- buscarPorVin: Buscar por n√∫mero VIN\n';
          break;
        case 'solicitarAsesor':
          functionsContext += '- solicitarAsesor: Conectar con asesor humano\n';
          break;
        case 'procesarEnvio':
          functionsContext += '- procesarEnvio: Procesar env√≠o a domicilio\n';
          break;
      }
    });

    functionsContext += '\nUsa estas funciones cuando sea apropiado para ayudar al cliente.\n';
    
    return functionsContext;
  }

  /**
   * Agrega contexto del negocio
   */
  private addBusinessContext(context: PromptContext): string {
    const userProfile = context.conversationMemory.longTermMemory.userProfile;
    const businessContext = context.businessContext;

    let businessInfo = '\n\nCONTEXTO DEL NEGOCIO:\n';
    businessInfo += `- Sucursal: ${userProfile.businessContext.pointOfSaleId}\n`;
    businessInfo += `- Hora del d√≠a: ${this.getTimeOfDay()}\n`;
    
    if (businessContext?.specialOffers) {
      businessInfo += `- Ofertas especiales: ${businessContext.specialOffers.join(', ')}\n`;
    }

    if (businessContext?.inventory?.lastUpdate) {
      businessInfo += `- Inventario actualizado: ${businessContext.inventory.lastUpdate}\n`;
    }

    return businessInfo;
  }

  /**
   * Genera un prompt de respaldo
   */
  private generateFallbackPrompt(context: PromptContext): string {
    return `Eres Embler, un asistente inteligente de refacciones automotrices.
    
Ayuda al cliente de manera profesional y amigable.
Usa las funciones disponibles para buscar productos y procesar compras.
Siempre pregunta por detalles espec√≠ficos cuando sea necesario.

Cliente: ${context.currentMessage}

Responde de manera √∫til y proactiva.`;
  }

  /**
   * Genera prompt para funci√≥n espec√≠fica
   */
  generateFunctionPrompt(functionName: string, context: PromptContext): string {
    const basePrompt = this.generatePrompt('main', context);
    
    let functionSpecific = '';
    
    switch (functionName) {
      case 'consultarInventario':
        functionSpecific = '\n\nAHORA: Busca el producto espec√≠fico que necesita el cliente usando consultarInventario.';
        break;
      case 'generarTicket':
        functionSpecific = '\n\nAHORA: Genera un ticket de compra con la informaci√≥n proporcionada.';
        break;
      case 'buscarPorVin':
        functionSpecific = '\n\nAHORA: Usa el n√∫mero VIN para encontrar refacciones compatibles.';
        break;
      case 'solicitarAsesor':
        functionSpecific = '\n\nAHORA: Conecta al cliente con un asesor humano especializado.';
        break;
      default:
        functionSpecific = `\n\nAHORA: Ejecuta la funci√≥n ${functionName} seg√∫n la solicitud del cliente.`;
    }

    return basePrompt + functionSpecific;
  }

  /**
   * Obtiene la hora del d√≠a
   */
  private getTimeOfDay(): string {
    const hour = new Date().getHours();
    if (hour >= 6 && hour < 12) return 'ma√±ana';
    if (hour >= 12 && hour < 18) return 'tarde';
    if (hour >= 18 && hour < 22) return 'noche';
    return 'madrugada';
  }

  /**
   * Registra nueva plantilla de prompt
   */
  registerPromptTemplate(template: PromptTemplate): void {
    this.prompts.set(template.id, template);
    console.log(`[DynamicPromptGenerator] Plantilla registrada: ${template.id}`);
  }

  /**
   * Obtiene todas las plantillas disponibles
   */
  getAvailablePrompts(): string[] {
    return Array.from(this.prompts.keys());
  }
}

// Exportar instancia singleton
export const dynamicPromptGenerator = new DynamicPromptGenerator(); 