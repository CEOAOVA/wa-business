/**
 * Script de migraci√≥n para convertir contrase√±as en texto plano a hashes bcrypt
 * Ejecutar con: npm run migrate:passwords
 */

import { supabaseAdmin } from '../config/supabase';
import { PasswordUtils } from '../utils/password.utils';
import { logger } from '../utils/logger';

async function migratePasswords() {
  try {
    console.log('üîê Iniciando migraci√≥n de contrase√±as...');
    
    // Verificar que supabaseAdmin est√© disponible
    if (!supabaseAdmin) {
      throw new Error('Supabase Admin client no est√° disponible. Verifica las variables de entorno.');
    }
    
    // Obtener todos los agentes
    const { data: agents, error: fetchError } = await supabaseAdmin
      .from('agents')
      .select('id, username, password')
      .order('created_at', { ascending: true });

    if (fetchError) {
      throw new Error(`Error obteniendo agentes: ${fetchError.message}`);
    }

    if (!agents || agents.length === 0) {
      console.log('‚úÖ No hay agentes para migrar');
      return;
    }

    console.log(`üìä Encontrados ${agents.length} agentes para verificar`);

    let migratedCount = 0;
    let alreadyHashedCount = 0;
    let errorCount = 0;

    // Procesar cada agente
    for (const agent of agents) {
      try {
        // Verificar si la contrase√±a ya est√° hasheada
        if (PasswordUtils.isPasswordHashed(agent.password)) {
          alreadyHashedCount++;
          console.log(`‚úì ${agent.username} - contrase√±a ya hasheada`);
          continue;
        }

        // Hashear la contrase√±a
        console.log(`üîÑ Migrando contrase√±a para: ${agent.username}`);
        const hashedPassword = await PasswordUtils.hashPassword(agent.password);

        // Actualizar en la base de datos
        const { error: updateError } = await supabaseAdmin!
          .from('agents')
          .update({ 
            password: hashedPassword,
            updated_at: new Date().toISOString()
          })
          .eq('id', agent.id);

        if (updateError) {
          throw new Error(`Error actualizando agente ${agent.username}: ${updateError.message}`);
        }

        migratedCount++;
        console.log(`‚úÖ ${agent.username} - contrase√±a migrada exitosamente`);

      } catch (error) {
        errorCount++;
        console.error(`‚ùå Error migrando ${agent.username}:`, error);
        logger.error(`Error migrando contrase√±a para ${agent.username}:`, error);
      }
    }

    // Resumen final
    console.log('\nüìä RESUMEN DE MIGRACI√ìN:');
    console.log(`‚úÖ Contrase√±as migradas: ${migratedCount}`);
    console.log(`‚ÑπÔ∏è  Ya hasheadas: ${alreadyHashedCount}`);
    console.log(`‚ùå Errores: ${errorCount}`);
    console.log(`üìä Total procesados: ${agents.length}`);

    if (errorCount > 0) {
      console.log('\n‚ö†Ô∏è  Hubo errores durante la migraci√≥n. Revisa los logs para m√°s detalles.');
    } else {
      console.log('\n‚úÖ Migraci√≥n completada exitosamente!');
    }

  } catch (error) {
    console.error('‚ùå Error fatal en migraci√≥n:', error);
    logger.error('Error fatal en migraci√≥n de contrase√±as:', error);
    process.exit(1);
  }
}

// Ejecutar migraci√≥n
migratePasswords()
  .then(() => {
    console.log('\nüéâ Proceso de migraci√≥n finalizado');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Migraci√≥n fall√≥:', error);
    process.exit(1);
  });
