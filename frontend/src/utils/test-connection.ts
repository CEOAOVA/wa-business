/**
 * Utilidad para probar la conexi√≥n WebSocket desde la consola del navegador
 * 
 * USO:
 * 1. Abre la consola del navegador (F12)
 * 2. Copia y pega este c√≥digo
 * 3. Ejecuta: testWebSocket()
 */

export function testWebSocket() {
  console.log('üîç INICIANDO DIAGN√ìSTICO DE WEBSOCKET...\n');
  
  // 1. Verificar token
  const token = localStorage.getItem('authToken');
  console.log('1Ô∏è‚É£ TOKEN DE AUTENTICACI√ìN:');
  if (token) {
    console.log('   ‚úÖ Token presente:', token.substring(0, 30) + '...');
  } else {
    console.error('   ‚ùå NO HAY TOKEN - Necesitas iniciar sesi√≥n primero');
    return;
  }
  
  // 2. Verificar URL del backend
  console.log('\n2Ô∏è‚É£ CONFIGURACI√ìN DEL BACKEND:');
  // @ts-ignore
  const backendUrl = import.meta.env?.VITE_BACKEND_URL || 'No configurado';
  console.log('   üìç Backend URL:', backendUrl);
  
  // 3. Intentar conexi√≥n manual
  console.log('\n3Ô∏è‚É£ PROBANDO CONEXI√ìN MANUAL...');
  
  // @ts-ignore
  if (typeof io === 'undefined') {
    console.error('   ‚ùå Socket.IO no est√° cargado');
    return;
  }
  
  // @ts-ignore
  const testSocket = io(backendUrl || 'https://dev-apiwaprueba.aova.mx', {
    transports: ['websocket'],
    auth: { token },
    withCredentials: true,
    timeout: 20000
  });
  
  testSocket.on('connect', () => {
    console.log('   ‚úÖ CONEXI√ìN EXITOSA!');
    console.log('   üÜî Socket ID:', testSocket.id);
    console.log('   üöÄ El WebSocket funciona correctamente');
    
    // Limpiar
    setTimeout(() => {
      testSocket.disconnect();
      console.log('   üîå Desconectado de prueba');
    }, 2000);
  });
  
  testSocket.on('connect_error', (error: any) => {
    console.error('   ‚ùå ERROR DE CONEXI√ìN:', error.message || 'Connection failed');
    console.error('   üìù Detalles:', {
      type: error.type || 'unknown',
      data: error.data || null
    });
    
    // Diagn√≥stico del error
    if (error.message?.includes('auth') || error.message?.includes('token')) {
      console.error('\n   üîê PROBLEMA: Token inv√°lido o expirado');
      console.error('   üí° SOLUCI√ìN: Cierra sesi√≥n y vuelve a iniciar');
    } else if (error.message?.includes('CORS')) {
      console.error('\n   üåê PROBLEMA: Error de CORS');
      console.error('   üí° SOLUCI√ìN: Verificar configuraci√≥n CORS en el backend');
    } else if (error.message?.includes('timeout')) {
      console.error('\n   ‚è±Ô∏è PROBLEMA: Timeout de conexi√≥n');
      console.error('   üí° SOLUCI√ìN: Verificar que el backend est√© funcionando');
    } else {
      console.error('\n   ‚ùì PROBLEMA: Error desconocido');
      console.error('   üí° SOLUCI√ìN: Revisar logs del backend');
    }
  });
  
  // Timeout para evitar que quede colgado
  setTimeout(() => {
    if (!testSocket.connected) {
      console.error('\n‚è±Ô∏è TIMEOUT: No se pudo conectar en 10 segundos');
      testSocket.disconnect();
    }
  }, 10000);
}

/**
 * Funci√≥n para limpiar y resetear la conexi√≥n
 */
export function resetWebSocket() {
  console.log('üßπ Limpiando conexi√≥n WebSocket...');
  
  // Limpiar token si est√° corrupto
  const token = localStorage.getItem('authToken');
  if (token && token.length < 10) {
    console.log('   ‚ùå Token parece inv√°lido, limpiando...');
    localStorage.removeItem('authToken');
  }
  
  // Recargar la p√°gina para resetear todo
  console.log('   üîÑ Recargando p√°gina en 2 segundos...');
  setTimeout(() => {
    window.location.reload();
  }, 2000);
}

/**
 * Funci√≥n para monitorear mensajes en tiempo real
 */
export function monitorMessages() {
  console.log('üëÅÔ∏è MONITOREANDO MENSAJES EN TIEMPO REAL...\n');
  
  // @ts-ignore
  const socket = window.__socket || window.socket;
  
  if (!socket || !socket.connected) {
    console.error('‚ùå No hay conexi√≥n WebSocket activa');
    console.log('üí° Ejecuta primero: testWebSocket()');
    return;
  }
  
  console.log('‚úÖ Escuchando eventos...');
  
  socket.on('new_message', (data: any) => {
    console.log('üì® NUEVO MENSAJE:', data);
  });
  
  socket.on('conversation_updated', (data: any) => {
    console.log('üìù CONVERSACI√ìN ACTUALIZADA:', data);
  });
  
  socket.on('error', (error: any) => {
    console.error('‚ùå ERROR:', error);
  });
  
  console.log('   Deja esta ventana abierta para ver los mensajes en tiempo real');
  console.log('   Para detener el monitoreo, recarga la p√°gina');
}

// Exportar funciones al objeto window para uso en consola
if (typeof window !== 'undefined') {
  (window as any).testWebSocket = testWebSocket;
  (window as any).resetWebSocket = resetWebSocket;
  (window as any).monitorMessages = monitorMessages;
  
  console.log(`
üöÄ HERRAMIENTAS DE DIAGN√ìSTICO WEBSOCKET CARGADAS

Comandos disponibles:
  testWebSocket()    - Probar conexi√≥n WebSocket
  resetWebSocket()   - Limpiar y resetear conexi√≥n
  monitorMessages()  - Monitorear mensajes en tiempo real

Ejecuta: testWebSocket() para empezar el diagn√≥stico
  `);
}