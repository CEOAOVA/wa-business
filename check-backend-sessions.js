const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './backend/env.local' });

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Configuraci√≥n de Supabase no encontrada');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkActiveSessions() {
    console.log('üîç Verificando sesiones activas...\n');
    
    try {
        // 1. Verificar sesiones de autenticaci√≥n en Supabase
        console.log('üìä 1. Sesiones de Autenticaci√≥n (Supabase):');
        const { data: sessions, error: sessionsError } = await supabase.auth.admin.listSessions();
        
        if (sessionsError) {
            console.log('‚ùå Error al obtener sesiones:', sessionsError.message);
        } else {
            console.log(`‚úÖ ${sessions.length} sesiones activas encontradas`);
            
            if (sessions.length > 0) {
                sessions.forEach((session, index) => {
                    console.log(`\n   Sesi√≥n ${index + 1}:`);
                    console.log(`   ‚Ä¢ Usuario ID: ${session.user_id}`);
                    console.log(`   ‚Ä¢ Creada: ${new Date(session.created_at).toLocaleString()}`);
                    console.log(`   ‚Ä¢ √öltima actividad: ${new Date(session.updated_at).toLocaleString()}`);
                    console.log(`   ‚Ä¢ IP: ${session.ip || 'No disponible'}`);
                    console.log(`   ‚Ä¢ User Agent: ${session.user_agent ? session.user_agent.substring(0, 50) + '...' : 'No disponible'}`);
                });
            }
        }
        
        // 2. Verificar usuarios activos en la tabla agents
        console.log('\nüìä 2. Usuarios Activos (Tabla agents):');
        const { data: agents, error: agentsError } = await supabase
            .from('agents')
            .select('*')
            .eq('is_active', true)
            .order('last_login', { ascending: false });
        
        if (agentsError) {
            console.log('‚ùå Error al obtener agentes:', agentsError.message);
        } else {
            console.log(`‚úÖ ${agents.length} usuarios activos encontrados`);
            
            if (agents.length > 0) {
                agents.forEach((agent, index) => {
                    console.log(`\n   Usuario ${index + 1}:`);
                    console.log(`   ‚Ä¢ ID: ${agent.id}`);
                    console.log(`   ‚Ä¢ Email: ${agent.email}`);
                    console.log(`   ‚Ä¢ Nombre: ${agent.full_name}`);
                    console.log(`   ‚Ä¢ Rol: ${agent.role}`);
                    console.log(`   ‚Ä¢ √öltimo login: ${agent.last_login ? new Date(agent.last_login).toLocaleString() : 'Nunca'}`);
                    console.log(`   ‚Ä¢ Creado: ${new Date(agent.created_at).toLocaleString()}`);
                });
            }
        }
        
        // 3. Verificar conversaciones activas
        console.log('\nüìä 3. Conversaciones Activas:');
        const { data: conversations, error: conversationsError } = await supabase
            .from('conversations')
            .select('*')
            .eq('status', 'active')
            .order('updated_at', { ascending: false });
        
        if (conversationsError) {
            console.log('‚ùå Error al obtener conversaciones:', conversationsError.message);
        } else {
            console.log(`‚úÖ ${conversations.length} conversaciones activas encontradas`);
            
            if (conversations.length > 0) {
                conversations.forEach((conversation, index) => {
                    console.log(`\n   Conversaci√≥n ${index + 1}:`);
                    console.log(`   ‚Ä¢ ID: ${conversation.id}`);
                    console.log(`   ‚Ä¢ Usuario: ${conversation.user_id}`);
                    console.log(`   ‚Ä¢ Tel√©fono: ${conversation.phone_number}`);
                    console.log(`   ‚Ä¢ POS: ${conversation.point_of_sale_id}`);
                    console.log(`   ‚Ä¢ AI Mode: ${conversation.ai_mode}`);
                    console.log(`   ‚Ä¢ Agente asignado: ${conversation.assigned_agent_id || 'Ninguno'}`);
                    console.log(`   ‚Ä¢ √öltima actualizaci√≥n: ${new Date(conversation.updated_at).toLocaleString()}`);
                });
            }
        }
        
        // 4. Verificar mensajes recientes
        console.log('\nüìä 4. Mensajes Recientes (√∫ltimas 24 horas):');
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        
        const { data: messages, error: messagesError } = await supabase
            .from('messages')
            .select('*')
            .gte('timestamp', yesterday.toISOString())
            .order('timestamp', { ascending: false })
            .limit(10);
        
        if (messagesError) {
            console.log('‚ùå Error al obtener mensajes:', messagesError.message);
        } else {
            console.log(`‚úÖ ${messages.length} mensajes recientes encontrados`);
            
            if (messages.length > 0) {
                messages.forEach((message, index) => {
                    console.log(`\n   Mensaje ${index + 1}:`);
                    console.log(`   ‚Ä¢ ID: ${message.id}`);
                    console.log(`   ‚Ä¢ Conversaci√≥n: ${message.conversation_id}`);
                    console.log(`   ‚Ä¢ Rol: ${message.role}`);
                    console.log(`   ‚Ä¢ Contenido: ${message.content.substring(0, 100)}${message.content.length > 100 ? '...' : ''}`);
                    console.log(`   ‚Ä¢ Timestamp: ${new Date(message.timestamp).toLocaleString()}`);
                });
            }
        }
        
        console.log('\nüéâ Verificaci√≥n completada');
        
    } catch (error) {
        console.error('‚ùå Error general:', error.message);
    }
}

// Ejecutar verificaci√≥n
checkActiveSessions().then(() => {
    process.exit(0);
}).catch((error) => {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
}); 