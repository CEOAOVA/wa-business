/**
 * Script de prueba para validar n√∫meros de tel√©fono
 * Verifica que los n√∫meros mexicanos se procesen correctamente
 */

// Simular la funci√≥n validatePhoneNumber del backend (versi√≥n corregida con l√≥gica inteligente)
function validatePhoneNumber(phone) {
  try {
    // Remover todos los caracteres no num√©ricos
    let cleaned = phone.replace(/\D/g, '');
    
    // Verificar que tenga al menos 10 d√≠gitos
    if (cleaned.length < 10) {
      return {
        isValid: false,
        formatted: phone,
        error: 'El n√∫mero debe tener al menos 10 d√≠gitos'
      };
    }
    
    // Si el n√∫mero empieza con 52 (c√≥digo de M√©xico), procesarlo correctamente
    if (cleaned.startsWith('52')) {
      // Si tiene exactamente 12 d√≠gitos (52 + 10 d√≠gitos), est√° bien formateado
      if (cleaned.length === 12) {
        return {
          isValid: true,
          formatted: cleaned,
          error: undefined
        };
      }
      // Si tiene exactamente 13 d√≠gitos y empieza con 521, est√° bien formateado
      if (cleaned.length === 13 && cleaned.startsWith('521')) {
        return {
          isValid: true,
          formatted: cleaned,
          error: undefined
        };
      }
      // Si tiene m√°s de 13 d√≠gitos, verificar si es un n√∫mero v√°lido de M√©xico
      if (cleaned.length > 13) {
        // Si empieza con 521 (c√≥digo de M√©xico + √°rea), mantener el formato
        if (cleaned.startsWith('521')) {
          // Tomar los primeros 13 d√≠gitos para mantener el formato correcto
          cleaned = cleaned.substring(0, 13);
          console.log(`üì± [PhoneValidation] N√∫mero mexicano con √°rea truncado a 13 d√≠gitos: ${cleaned}`);
          return {
            isValid: true,
            formatted: cleaned,
            error: undefined
          };
        } else {
          // Para otros casos, tomar los √∫ltimos 12 d√≠gitos
          cleaned = cleaned.slice(-12);
          console.log(`üì± [PhoneValidation] N√∫mero con c√≥digo 52 truncado a √∫ltimos 12 d√≠gitos: ${cleaned}`);
          return {
            isValid: true,
            formatted: cleaned,
            error: undefined
          };
        }
      }
      // Si tiene menos de 12 d√≠gitos pero empieza con 52, es inv√°lido
      return {
        isValid: false,
        formatted: phone,
        error: 'N√∫mero mexicano incompleto (debe tener 12 d√≠gitos con c√≥digo 52)'
      };
    }
    
    // Si empieza con 1 (c√≥digo de pa√≠s), removerlo para M√©xico
    // SOLO si no es un n√∫mero mexicano (no empieza con 52)
    if (cleaned.startsWith('1') && cleaned.length === 11 && !cleaned.startsWith('521')) {
      cleaned = cleaned.substring(1);
      console.log(`üì± [PhoneValidation] Removido c√≥digo de pa√≠s 1: ${cleaned}`);
    }
    
    // Si el n√∫mero tiene m√°s de 10 d√≠gitos, tomar los √∫ltimos 10
    if (cleaned.length > 10) {
      cleaned = cleaned.slice(-10);
      console.log(`üì± [PhoneValidation] N√∫mero truncado a √∫ltimos 10 d√≠gitos: ${cleaned}`);
    }
    
    // Verificar que sea un n√∫mero v√°lido de M√©xico (10 d√≠gitos)
    if (cleaned.length !== 10) {
      return {
        isValid: false,
        formatted: phone,
        error: 'El n√∫mero debe tener 10 d√≠gitos (formato mexicano)'
      };
    }
    
    // Formatear para WhatsApp (c√≥digo de pa√≠s + n√∫mero)
    const formatted = `52${cleaned}`;
    
    return {
      isValid: true,
      formatted,
      error: undefined
    };
  } catch (error) {
    return {
      isValid: false,
      formatted: phone,
      error: 'Error validando n√∫mero de tel√©fono'
    };
  }
}

// Casos de prueba espec√≠ficos para el problema reportado
const testCases = [
  // Caso espec√≠fico del problema reportado
  { input: '5215549679734', expected: '5215549679734', description: 'N√∫mero mexicano completo con 52155 (CASO PROBLEMA)' },
  { input: '15549679734', expected: '5215549679734', description: 'N√∫mero mexicano sin c√≥digo pa√≠s (155)' },
  { input: '5549679734', expected: '525549679734', description: 'N√∫mero mexicano sin c√≥digo pa√≠s (55)' },
  
  // N√∫meros mexicanos correctos
  { input: '521551234567', expected: '521551234567', description: 'N√∫mero mexicano completo con 52' },
  { input: '1551234567', expected: '521551234567', description: 'N√∫mero mexicano sin c√≥digo pa√≠s' },
  { input: '551234567', expected: '52551234567', description: 'N√∫mero mexicano sin c√≥digo pa√≠s' },
  
  // N√∫meros con formato internacional
  { input: '+521551234567', expected: '521551234567', description: 'N√∫mero con +52' },
  { input: '52 155 123 4567', expected: '521551234567', description: 'N√∫mero con espacios' },
  { input: '52-155-123-4567', expected: '521551234567', description: 'N√∫mero con guiones' },
  
  // N√∫meros largos (deber√≠an truncarse inteligentemente)
  { input: '521551234567890', expected: '5215512345678', description: 'N√∫mero largo con 521 (truncar a 13 d√≠gitos)' },
  { input: '521234567890123', expected: '521234567890', description: 'N√∫mero largo con 52 (truncar √∫ltimos 12)' },
  { input: '1551234567890', expected: '521551234567', description: 'N√∫mero largo sin c√≥digo pa√≠s (truncar)' },
  
  // Casos inv√°lidos
  { input: '123', expected: 'invalid', description: 'N√∫mero muy corto' },
  { input: '521234', expected: 'invalid', description: 'N√∫mero mexicano incompleto' },
];

console.log('üß™ Probando validaci√≥n de n√∫meros de tel√©fono (VERSI√ìN FINAL)...\n');

testCases.forEach((testCase, index) => {
  console.log(`üì± Test ${index + 1}: ${testCase.description}`);
  console.log(`   Input: ${testCase.input}`);
  
  const result = validatePhoneNumber(testCase.input);
  
  if (testCase.expected === 'invalid') {
    if (!result.isValid) {
      console.log(`   ‚úÖ PAS√ì - Correctamente inv√°lido: ${result.error}`);
    } else {
      console.log(`   ‚ùå FALL√ì - Deber√≠a ser inv√°lido pero result√≥ v√°lido: ${result.formatted}`);
    }
  } else {
    if (result.isValid && result.formatted === testCase.expected) {
      console.log(`   ‚úÖ PAS√ì - Resultado correcto: ${result.formatted}`);
    } else {
      console.log(`   ‚ùå FALL√ì - Esperado: ${testCase.expected}, Obtenido: ${result.formatted} (${result.error || 'sin error'})`);
    }
  }
  console.log('');
});

console.log('üéØ Pruebas completadas. Verifica que el caso espec√≠fico 5215549679734 mantenga el "1" y no se convierta en 525549679734.');